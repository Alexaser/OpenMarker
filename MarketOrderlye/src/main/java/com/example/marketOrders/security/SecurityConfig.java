package com.example.marketOrders.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity

public class SecurityConfig {

    @Bean
    public BCryptPasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                // üî• –û—Ç–∫–ª—é—á–∞–µ–º CSRF —Ç–æ–ª—å–∫–æ –¥–ª—è API (—á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∏ POST-–∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ª–æ–≥–∏–Ω)
                .csrf(csrf -> csrf
                        .ignoringRequestMatchers("/auth/**") // ‚õî CSRF –æ—Ç–∫–ª—é—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è API
                )

                // üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/auth/register", "/auth/login").permitAll() // ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º
                        .requestMatchers("/admin/**").hasRole("ADMIN") // üîí –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
                        .requestMatchers("/user/**").hasRole("USER") // üîí –¢–æ–ª—å–∫–æ —é–∑–µ—Ä–∞–º
                        .anyRequest().authenticated() // üîí –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Ç—Ä–µ–±—É—é—Ç –≤—Ö–æ–¥–∞
                )

                // üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º—ã –ª–æ–≥–∏–Ω–∞
                .formLogin(login -> login
                        .loginPage("/login") // üî• –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
                        .defaultSuccessUrl("/dashboard", true) // ‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
                        .permitAll() // üîì –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º
                )

                // üö™ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã—Ö–æ–¥–∞
                .logout(logout -> logout
                        .logoutUrl("/logout") // üî• URL –¥–ª—è –≤—ã—Ö–æ–¥–∞
                        .logoutSuccessUrl("/") // üîô –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞
                        .permitAll() // ‚úÖ –í—ã—Ö–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º
                );

        return http.build();
    }
}


//public class SecurityConfig {
//
//    @Bean
//    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
//        return http.csrf().disable() // –û—Ç–∫–ª—é—á–∞–µ–º CSRF –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö POST-–∑–∞–ø—Ä–æ—Å–æ–≤
//                .authorizeHttpRequests(auth -> auth
//                        .requestMatchers(HttpMethod.POST, "/customers").permitAll() // –†–∞–∑—Ä–µ—à–∞–µ–º POST-–∑–∞–ø—Ä–æ—Å—ã
//                        .requestMatchers(HttpMethod.GET, "/customers").permitAll()
//                        .anyRequest().authenticated()
//                )
//                .httpBasic(Customizer.withDefaults()) // –í–∫–ª—é—á–∞–µ–º Basic Auth
//                .build();
//    }
//}

    /*  —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥, –¥–æ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        return http
                .csrf().disable() // –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–∞–µ–º CSRF
                .authorizeHttpRequests(auth -> auth
                        .anyRequest().permitAll() // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Å—ë
                )
                .build();
    }
    */